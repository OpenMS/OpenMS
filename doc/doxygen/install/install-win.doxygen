/**

  @page install_win Building %OpenMS on Windows

  @section install_win_read Introduction


  This document addresses %OpenMS users and explains the
  installation procedure for building %OpenMS from its sources. If you only want to use the %OpenMS Proteomics Pipeline (TOPP), you are strongly
  encouraged to <b>download the windows binary installer</b>
  (see <a href="http://www.OpenMS.de/download/" target="_blank">here</a>),
  instead of building %OpenMS from sources.
  For more information read the install instructions for the TOPP binaries.

  This document especially considers the installation of several libraries which are required by %OpenMS.
  Most of these libraries are made available in our "contrib-package" (see below).
  <br>
  If you encounter errors during configuring/compiling our software, have a look at our "Known Issues" section \ref known_dev_bugs "here",
  maybe the error is already known. If not, please write to the <a href="open-ms-general@lists.sourceforge.net" target="_new">mailing list</a>.
  <br>
  <br>


  <b>Notation of this tutorial</b>
     <ul>
        <li>whenever there is a $ this implies entering everything that follows the $ into a command prompt (usually the Visual Studio Command Prompt)
        <li>A string in &lt;&gt; is something the user needs to choose e.g. &lt;path_to_contrib&gt; means that this string should be replaced by the path where the user put the %OpenMS contrib package. Usually all commands where this is necessary come with examples, so don't worry.
        <li>Whenever you added a path to your Windows PATH Environment variable, every Command Prompt which is already open will not be refreshed. You will need a to open a new one.
     </ul>


  @section install_win_setup Setup of environment

    <b>Pre-Requisites (Software)</b>
    <ul>
      <li>have a Visual Studio 2005/2008/2010[SP1]/2012/2013 installed (The C++ Express editions should work as well, we tested VSE2008, VSE2012 and VSE2013).
        <br>Visual C++ Express 2012 and above support Win64 and OpenMP by default. For older editions (2010 and below) you can find tutorials on how to enable them on the internet.
        <br>If you work with VS2008, installation of the Service Pack 1 (SP1) is required,
            otherwise VS might crash during the compilation of the contrib package.
        <br><b>Not supported are MinGW (g++ based compiler) and VS2003 (and earlier). Do not use a MinGW-enabled shell since CMake will get confused!</b>
            Other compilers which are close to the VS toolchain might work, but are not tested.
      <li>Have CMake 2.8.3 or greater installed (see http://www.cmake.org)<br>
             [VS2012 requires CMake 2.8.10 or later, VS2013 needs CMake 2.8.11.2]
      <li>If you work with the Git (= nightly) version of %OpenMS (instead of the Release package), we recommend downloading
        the pre-compiled binaries <a href="http://ftp.mi.fu-berlin.de/pub/OpenMS/nightly_binaries/">here</a>. There are multiple binary distributions out there. Pick the one you like.
        Binaries including "Head" or "head" include the latest updates and fixes but might be unstable.
      <li>To build the contrib-package you will need <tt>7-Zip</tt> (see http://www.7-zip.org/)
        <br>7z.exe is searched in "C:/Program Files/7-Zip/" and "C:/Programme/7-Zip/". Make sure it is in either of these locations or add
        the installation directory to your PATH.
      <li>To build the contrib-package you will need <tt>patch</tt> (see http://gnuwin32.sourceforge.net/packages/patch.htm)
        <br>patch.exe is searched in "C:/Program Files/gnuwin32/bin" and "C:/Program Files/patch/bin". Make sure it is in either of these locations or add
        the installation directory to your PATH. <tt>patch</tt> might be installed with your "Git for Windows" installation if present.
    </ul>


  @section install_win_required Installing required dependency libraries

    %OpenMS depends on several other libraries. On a windows system, these are usually not present.

  @subsection install_qt QT installation

    We require Qt version 4.5 or higher.<br>
    <b>Qt 5.X IS NOT SUPPORTED YET!</b><br>
    VS2012 and VS2013 require at least Qt 4.8.4 with some additional fix (see below).

    Qt comes in two flavors: commercial or non-commercial - choose whatever is applicable to you: read more on the Qt website
    Recently (beginning with Qt 4.6) there are binary development versions available for VS2010 and VS2008. We found these to contain only
    32bit compilations. If you are compiling for 32bit as well, you can download these and save a lot of time. They are incompatible for 64bit builds -
    compile Qt yourself in this case (or see if you can find 64bit builds on the Qt website). Make sure NOT to use the MinGW precompiled binaries, since
    they are incompatible with Visual Studio binaries.

    Follow this procedure if you want to compile Qt yourself:
    <ol>
      <li>non-commercial:
        <ol>
          <li>download Qt <b>source</b> from http://qt-project.org/downloads as .zip or .tar.gz (or use the prebuild binaries exactly matching your compiler!)
          <li>extract zip file to a temp location (called <path-to-tmp-qt> henceforth)
                    <li>[VS2012 and VS2013 only] there is a bug in the latest Qt (4.8.4 and 4.8.5) preventing compilation. Look at http://stackoverflow.com/questions/12113400/compiling-qt-4-8-x-for-visual-studio-2012 for a fix.
                            It's meant for 4.8.3 though. For 4.8.4 and 4.8.5 you only need to fix HashSet.h!
                            If you use VS2013 you additionally need to remove three functions from <path-to-tmp-qt>\src\3rdparty\webkit\Source\JavaScriptCore\wtf\MathExtras.h,
                            which are already defined by VS2013 (round(), roundf and signbit()).
          <li>open a Visual Studio Command Line (use x64 version if you want 64bit apps!)
          <li>
            \code
            $ cd <path-to-tmp-qt>
            \endcode
          <li>if you have multiple versions of VS installed you might need to provide the <tt>-platform</tt> param for the next configure command (e.g., <tt>-platform win32-msvc2012</tt>)
		  <li>[VS2013 only] Qt 4.8.5 does not support VS2013 out of the box. You need to change QMAKE_COMPILER_DEFINES to <tt>+= _MSC_VER=<b>1800</b> WIN32</tt> in <tt>&lt;qt&gt;\mkspecs\win32-msvc2012</tt> and call configure.exe with <tt>-platform win32-msvc2012</tt>.
          <li>
            \code
            $ configure.exe -opensource -nomake demos -nomake examples -no-script -webkit -prefix <path-to-qt>  ...[more options, e.g. -graphicssystem opengl]
            \endcode
          <li>
            \code
            $ nmake
            \endcode
          <li>
          \code
          $ nmake install
          \endcode
          <li>all Qt files (libs, includes etc) are now in <tt><path-to-qt></tt> and sub-directories. You can delete <tt><path-to-tmp-qt></tt> (since it will consume quite a lot of disk space)
          <li>alternatively to nmake, you can download JOM (http://qt-project.org/wiki/jom) and type "jom" in your Qt build directory to use multiple cores (builds a lot faster usually)
        </ol>
      <li>commercial:
        <ol>
          <li>we have no experience here, but it should be possible to get the DLL's and Link-Libraries here as well.
        </ol>
      <li>add the <tt>&lt;Qt&gt;/bin</tt> (!) directory to your PATH Environment Variable
        </ol>

    @subsection install_win_contrib Contrib installation
        In order to make the
        installation of the remaining required libraries easier, we composed a
        "contrib-package" containing the libraries Boost, Eigen, WildMagic, libSVM, SeqAn, glpk, zlib, libbz2 and Xerces-C.
        This contrib package has several advantages over manual installation
        <ul>
            <li>You get all the libraries in versions tested with %OpenMS.</li>
            <li>It contains a batch script that builds all the libraries in one step.</li>
            <li>You don't have to spend hours reading installation instructions of all the libraries.</li>
            <li>We applied some patches to the libraries to fix some bugs. <BR><b>These bugs may be fatal if you do not use the contrib package.</b></li>
        </ul>

  @b Download:

    The contrib package is contained in the %OpenMS release package.

    If you are using the developer version of %OpenMS, you must check out the contrib from GitHub repository
    \code
    &gt; git clone https://github.com/OpenMS/contrib
    \endcode
    to obtain the latest developer version (potentially unstable).

  @b Installation:

    On Vista/Win7/Win8 some programs using during contrib creation (e.g. <tt>patch.exe</tt>) require elevation, otherwise the contrib will not build.
    Thus, you need an admin account with disabled UAC (User Account Control) or alternatively you can start a command line by right-clicking on its link and choosing "Run as administrator", while UAC is still enabled.

    After you got the source code for the contrib package open a VisualStudio Command line (see Start-Menu).

    <ol>
      <li>Open a Visual Studio Command Line (use x64 version if you want 64bit apps!)
      <li>Create a build directory for the %OpenMS contrib <br>
        -e.g. <tt>$ mkdir contrib_win64_build</tt>
      <li>Call CMake to build the contrib<br>
        Be aware that you can build 64bit apps even if your operating system is only 32bit (cross-compiling), but you will not be
        able to run 64bit apps in this case.

        \code
        cd <path_to_contrib_build>
        cmake -DBUILD_TYPE=ALL -G "<generator>" "<path_to_contrib>"
        \endcode

        The <tt>&lt;generator&gt;</tt> you use must be one of the Visual Studio Generators. This is because some contrib libs require Visual Studio to build.
        Be careful to specify the Generator suffixed with "Win64" if you want a 64bit contrib!
        Type <tt>$ cmake</tt> to see a list of available generators.<br>

        Example:
        \code
        cd c:\dev\contrib_win64_build
        cmake -G "Visual Studio 9 2008 Win64" "c:\dev\contrib"
        \endcode

      <li>Add the &lt;path_to_contrib_build&gt;/lib directory to your PATH Environment Variable (this is so Windows can find the DLL's when running our executables).
    </ol>

@section create_doc Building the documentation (optional)

  This section is optional. If you can live with the online documentation, you do not need to build your own.

  In order to build the class documentation (<tt>doc</tt> & <tt>doc_internal</tt> targets), TOPP tutorials (<tt>doc_tutorials</tt> target) and more,
  you will need to install three programs:

  <ol>
    <li> Doxygen (version 1.5.8 and 1.8.2 are tested, others might work as well)
      <ul>
        <li> Download the installer for Windows (http://www.doxygen.org)
        <li> Execute the installer. It should automatically add doxygen.exe to the Windows PATH Environment (please recheck)
      </ul>
    <li> MikTeX (version 2.7 and 2.9 are tested, others might work as well) - basic version (for DVIPS, LATEX etc).
      <ul>
         <li> Download binaries for Windows (http://miktex.org/)
         <li> During installation tick "install missing packages on the fly = yes"
         <li> The installer SHOULD add the bin directory of MikTeX automatically to the Windows PATH Environment (please recheck)
      </ul>
    <li> GPL Ghostscript (8.60) for Windows
      <ul>
         <li> Download binaries for Windows (http://www.ghostscript.com/) and install
         <li> Add the <i>&lt;path_to_GHOSTSCRIPT&gt;/bin</i> directory (e.g. c:/programs/gs/gs8.60/bin) to the Windows PATH Environment
      </ul>
    <li>
      Optional:<br>
        You can create dependency graphs using a doxygen plug-in called <tt>dot</tt>.
        <ul>
            <li> Download binaries for windows from http://www.graphviz.org (we tested: graphviz-2.18.exe)
            <li> The installer should have added dot.exe to the Windows PATH Environment (please recheck)
        </ul>
  </ol>

  You should install the above apps prior to installing %OpenMS, because otherwise during the configuration step the documentation targets will be
  disabled.
  If you already have a working installation of %OpenMS (without documentation), you can simply install the above programs and then delete the CMakeCache.txt file
  in your %OpenMS build directory and reconfigure %OpenMS by calling cmake (see below). No need to recompile the library!

  @section install_win_openms Installing OpenMS

    If you have not installed the libraries which %OpenMS requires,
    please refer to the section @ref install_win_contrib above.
    <br>
    Assuming you have successfully installed the dependent libraries, you need to
    get the %OpenMS source code. The latest stable version of %OpenMS
    can be found in the <a href="http://www.OpenMS.de/download/" target="_blank">download</a> page.
    For further (e.g. latest developer version from GitHub) info see the <a href="http://www.OpenMs.de/download/" target="_blank">download instructions</a>.
    <br>
    <br>
    After you got the source code open a VisualStudio Command line (see Start-Menu).
    To create Visual Studio Project Files using CMake:
    <ol>
      <li>Open a Visual Studio Command Line (use x64 version if you want 64bit apps!)
      <li>Create a build directory for %OpenMS<br>
          -e.g. $ mkdir OpenMS_Win64
      <li>Call CMake to create the BuildSystem there
        \code
        cd <path_to_OpenMS_build>
        cmake -D CMAKE_PREFIX_PATH="<path_to_contrib_build>" -G "<generator>" "<path_to_OpenMS>"
        \endcode

        The choice of &lt;generator&gt; is dependent on your system. Type <tt>$ cmake</tt> to see a list of available generators.
        If you use a Visual Studio Generator, it should be identical to the one used for building the contrib.
        Example:
        \code
        cd c:\dev\OpenMS_Win64
        cmake -D CMAKE_PREFIX_PATH="C:\dev\contrib_win64_build" -G "Visual Studio 9 2008 Win64" ..\OpenMS
        \endcode
    </ol>

    Now there should be a <tt>OpenMS_host.sln</tt> file in your build directory, which you can open using Visual Studio.
    If you choose another generator (e.g. Eclipse) you will find something equivalent. If you want to work on only a
    subset of OpenMS (e.g., OpenMS_GUI) you can open the specific solution that you will find in the src/ folder of your
    build folder and below (e.g., src/openms_gui/OpenMS_GUI.sln).

    In Visual Studio execute the 'targets' project, which will show you the most prominent targets.

    Try to build the %OpenMS library - the target is called 'OpenMS'. This will create the %OpenMS dll. If you used the debug configuration it will be called
    OpenMSd.dll, in release mode its called OpenMS.dll.<br>
    As a last step you should add the location of the %OpenMS dll to your PATH environment. This is required for TOPP tools like TOPPAS, which might otherwise not
    work. Also external projects (see @subpage external_code) require the %OpenMS dll (OpenMS.dll or OpenMSd.dll) to be in the PATH. Depending on the generator and
    configuration used you will find the dll in [OpenMS_build]/bin/Release or [OpenMS_build]/bin/Debug or just [OpenMS_build]/bin. In the same folder the
    TOPP tools will reside once build (see next section).
    Be aware that the order of directories in the PATH variable determines which dll or executable is used, if no absolute path was given when the executable was called.
    So the PATH might need to be updated (add/delete/reorder entries) if you are working with multiple installations or configurations of %OpenMS.

    @section install_win_topp Building the TOPP tools

    TOPP is a toolset for the analysis of HPLC-MS data. It consists of several small applications that can be chained to create analysis pipelines tailored for a specific problem.
    <br>
    <br>
    After you have built %OpenMS, you can build the TOPP tools
    by building the "TOPP" project in the IDE.
    <br>

  @section install_win_testing_openms Testing your OpenMS/TOPP installation

  Each class in %OpenMS and each TOPP tool has a unit test. The tests will be build with the complete solution. To specifically build and execute the tests,
  go to your %OpenMS build_tree and further into ./src/tests/class_tests. There you'll find an OpenMS_class_tests.sln file, which you can open.
  For other generators an equivalent file with another suffix will be present. Now, build the 'ALL_BUILD' target and the 'RUN_TESTS' target.
  You can also run the tests in a command prompt in &lt;OpenMS_build_tree&gt; using <tt>ctest</tt>
  Single tests can be run with $ ctest -R &lt;testnameregex&gt;, e.g. $ ctest -R Base64_test
  For more syntax on CTest look at the online documentation at http://cmake.org/.

*/

