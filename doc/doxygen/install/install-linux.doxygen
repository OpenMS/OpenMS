/**

  @page install_linux Building OpenMS on GNU/Linux

  This document describes how to build OpenMS on a GNU/Linux system from
  source. If you do not have root privileges on your system, make sure you 
  read the section @ref build_linux_noroot.

  We are working on adding %OpenMS to the repositories of the most popular
  distributions, but for now the toolkit needs to be manually compiled on your
  system.

  @section checkout_and_build Checkout OpenMS

  You can find the links to the release and development versions on the
  <a href="http://www.openms.de/downloads/">Downloads</a> page of the
  %OpenMS project.

  From here on the instructions assume you have an extracted tar.gz of the
  Release and are inside its root, or checked out the development (git) version
  by:

  \code
  # Assuming you are in ~/Development
  git clone https://github.com/OpenMS/OpenMS.git
  \endcode

  @section bin_dep Dependencies obtainable in binary form

  Before building from source, %OpenMS requires several other libraries to be
  present on your system. Most of these should be available in the repositories
  of your GNU/Linux distribution.

  For the libraries/versions often not found in those repositories, we provide
  sources and build scripts.  The Release tar.gz archive contains the libraries
  in the contrib/ folder, if you build the Development (git) version, you'll
  have to check them out separately (see below in @ref build_linux_contrib and in @ref build_linux_noroot).

  <b>Required packages and libraries</b>

  Essential are GCC > 4.0 or other ANSI C++ compiler, CMake > 2.8.3, Qt4 > 4.6 (> 4.7 for the GUI),
  patch, autoconf > 2.60, automake > 1.9, libtool (libtoolize/glibtoolize).

  For the complete feature set to be enabled, %OpenMS needs recent versions of
  Boost (1.46 or higher works), Eigen3, WildMagic5,
  libSVM (2.91 or higher and 3.x for x <= 14 works), SeqAn (1.4.0 or higher needed),
  glpk (4.45 or higher works), zlib, libbz2, and Xerces-C (3.1.1 or higher works).

  Building the documentation from the development version requires doxygen > 1.5.4 and
  pdflatex/texlive/texlive-full.
  
  Building the Python extensions pyOpenMS requires Python (> 2.6), Cython (>
  0.19), nose testing and numpy.

  For the most common distributions, these commands will install most of the libraries:

  <table style="border-style:solid; border-collapse:collapse; border-color:#c0c0c0;" cellpadding="3px">
  <tr>
    <td><B>Fedora </B>
    also look <a href="http://koji.fedoraproject.org/koji/packages">here</a>
	</td>
    <td><pre>
    sudo yum install cmake gcc gcc-g++ autoconf autoconf-2.6 qt-devel
    </pre>
    </td>
  </tr>
  <tr>
    <td><B>OpenSuse 11.1</B></td>
    <td><pre>
    sudo zypper install cmake gcc-g++ autoconf libqt4-devel
    </pre></td>
  </tr>
  <tr>
    <td><B>Ubuntu/Debian <br/>(10.04/6.0 or later recommended)</B></td>
    <td><pre>
    sudo apt-get install cmake g++ autoconf qt4-dev-tools patch libtool make git
    sudo apt-get install libboost-regex-dev libboost-iostreams-dev libboost-date-time-dev libboost-math-dev \
      libsvm-dev libglpk-dev libzip-dev zlib1g-dev libxerces-c-dev libbz2-dev
    </pre></td>

  </tr>
  </table>

  @section build_linux_contrib Building remaining dependencies

  @note In most cases, the only dependencies left unresolved (e.g. not easily
  available through your distribution) at this point are SeqAn and WildMagic.
  You can check which dependencies you still need by attempting to configure
  %OpenMS (see the next section), it will complain about anything unusual.
  Contact us if you still have trouble with the dependencies after these
  instructions.

  OpenMS conveniently provides its dependencies for download.  The %OpenMS
  Release package (https://sourceforge.net/projects/open-ms/files/OpenMS/)
  contains the sources of all dependencies in the contrib/ folder.  For the
  Development (git) version, this folder is not included, it has to be checked
  out separately (and referred to later). We generally recommend to keep the
  contrib separate from the OpenMS source code. Assuming you have extracted the
  the %OpenMS source code in a folder ~/Development (i.e., ~/Development/OpenMS)
  we suggest to also put the contrib there (i.e., ~/Development/contrib). For the
  contrib as well as for %OpenMS we suggest to use out-of-source builds.


  @note Generally all files generated while building %OpenMS have to go
  somewhere. In case of in-source-builds all files will be generated alongside
  the source code. While this is easy and a well known practice from the
  regular ./configure + make approach it also changes your build tree. It also
  prohibits building multiple configurations (e.g., Debug and Release or
  different compiler versions). As an alternative CMake offers the possibility
  to perform so called out-of-source builds. Here all build files, binaries,
  libraries, etc. are generated in a separate directory.

  \code
  # Assuming you are in ~/Development
  git clone  https://github.com/OpenMS/contrib.git
  mkdir contrib-build
  cd contrib-build
  \endcode

  From the <i>./contrib-build/</i> folder, execute the following command to show the
  available build types and then build SeqAn (the other build scripts may be
  executed if your distribution does not provide a package for the dependency):

  \code
  cmake -DBUILD_TYPE=LIST ../contrib
  cmake -DBUILD_TYPE=SEQAN ../contrib
  cmake -DBUILD_TYPE=WILDMAGIC ../contrib
  cmake -DBUILD_TYPE=EIGEN ../contrib
  \endcode

  To avoid problems while building the libraries contained in the contrib
  package, the path to your contrib-build directory should not have any spaces
  in it.

  @section build_linux_noroot Building without root privileges

  If you are on a system without root access (e.g. a shared cluster), there are
  some additional considerations, especially regarding dependencies.
  Specifically, some older Red Hat systems have older libraries installed that
  may interfere with the newer versions that %OpenMS requires. The recommended
  installation procedure is to use the contrib package to compile <b>all</b>
  dependencies from source:

  \code
  cmake -DBUILD_TYPE=LIST ../contrib
  cmake -DBUILD_TYPE=ALL ../contrib
  \endcode

  Alternatively, you can build one package after the other by providing
  <tt>-DBUILD_TYPE=...</tt> with the appropriate argument. In addition, you
  may have to compile Qt yourself which you can get from <a
  href="http://download.qt.io/official_releases/qt">http://download.qt.io/official_releases/qt</a>
  (use a 4.x version), if it is not provided on your server or the version on
  your environment is too old. Then you can use the traditional 
  <tt>./configure --prefix=/path && gmake && gmake install</tt> sequence to compile
  and install Qt (note that you should set the <tt>--prefix=/path</tt> to a local directory assuming 
  you don't have root privileges).
  
  When configuring %OpenMS (see next section), consider setting <tt>WITH_GUI=Off</tt> and
  <tt>HAS_XSERVER=Off</tt>, especially as you may not have compiled Qt with
  OpenGL and you may not have an X server. If you want to use your own qt
  installation, be sure to set the <tt>QT_QMAKE_EXECUTABLE=/path/to/qmake</tt>
  flag when using cmake to configure %OpenMS. Finally, you may have to remove
  any system libraries from the <tt>CMAKE_PREFIX_PATH</tt> to ensure that the
  correct version of each library is used.

  @section install_linux_openms Configuring and building OpenMS/TOPP

  It is assumed that you have successfully built and installed all dependencies
  and are in the root folder of the OpenMS tree (see above in @ref
  checkout_and_build for instructions how to obtain OpenMS sources either from
  a release version or from the most recent development branch).

  The next step is to create a build directory beside the %OpenMS root
  directory e.g., OpenMS-build (see above note on out-of-source builds).

  \code
  # Assuming you are in ~/Development and OpenMS is also located in
  # ~/Development
  mkdir OpenMS-build
  cd OpenMS-build
  \endcode

  In the %OpenMS build directory we execute %CMake to \a configure %OpenMS. You
  should substitute \c /PATH/TO/contrib/ with the above path to the build
  contrib. Make sure you use the \a absolute (and not relative) path for the
  contrib to avoid any potential issues. If you encounter problems with
  previously installed system libraries, consider removing the
  <tt>/usr;/usr/local</tt> part of the path:

  \code
  cmake -DCMAKE_PREFIX_PATH="/PATH/TO/contrib-build;/usr;/usr/local" -DBOOST_USE_STATIC=OFF ../OpenMS
  \endcode

  In order to <i>build</i> the %OpenMS library, the TOPP tools, tests, and this
  documentation execute the following command:

  \code
  make
  \endcode

  @subsection linux_openms_environment Getting your environment ready to use OpenMS

  The previous step takes the most time, in the meanwhile you can prepare your
  environment for easy %OpenMS usage:

  Make sure to add <b>/PATH/TO/OpenMS/lib/</b> (e.g.
  <i>/home/smith/OpenMS/lib/</i>) to the environment variable
  <b>LD_LIBRARY_PATH</b>.  The best way is to edit $HOME/.bashrc and add the
  following
  \code
  export LD_LIBRARY_PATH="/PATH/TO/OpenMS/lib:$LD_LIBRARY_PATH"
  \endcode

  The TOPP tools will be built in the <b>/PATH/TO/OpenMS/bin/</b> folder. Add
  this path to the environment variable <b>PATH</b> to use the commands
  anywhere on your system.

  This is necessary to use the TOPP tools from TOPPView.

  You can do this by appending the following also to your $HOME/.bashrc
  (Do not use the tilde character @em ~ to abbreviate your home folder)

  \code
  export PATH=$PATH:/PATH/TO/OpenMS/bin
  \endcode

  Apply both changes by executing

  \code
  . ~/.bashrc
  \endcode

  @section running_linux_openms Running OpenMS
  If the build from @ref install_linux_openms is ready, you can now run a
  GNU/Linux %OpenMS tool by e.g. executing

  \code
  FileInfo
  \endcode

  From here on you should be good to go! See below for advanced installation and configuration options.

  <br/>
  <br/>

<hr/>
  @section advanced_linux_openms Advanced Options

  Advanced users can list the separate make targets by calling:
  \code
  make targets
  \endcode

  You can set more CMake variables adding <code>-DVARIABLE=VALUE</code> options in step @ref install_linux_openms.

  The most important CMake variables are:

  <table style="border-style:solid; border-collapse:collapse; border-color:#c0c0c0;">
    <tr>
      <td valign="top">\c CMAKE_INSTALL_PREFIX</td>
      <td>the path where the bin/ and lib/ directories should be installed to
          (when <pre>sudo make install</pre> is wished for a system-wide
          install: e.g. -DCMAKE_INSTALL_PREFIX=/usr/local/)
          <BR>
          <b>Note:</b> Moving these directories after installing is not supported.

	<b>For development, install prefixes are not supported. In this case %OpenMS must
	be built in place!</b>
     </td>
    </tr>
    <tr>
      <td valign="top">\c CMAKE_PREFIX_PATH</td>
      <td>Additional search path for the contrib libraries.
          If not set the location is assumed to be <pre>contrib/</pre> as packaged in the Release tar.gz.</td>
    </tr>
    <tr>
      <td valign="top">\c QT_QMAKE_EXECUTABLE</td>
      <td>Defines the Qt 'qmake' application. The corresponding Qt installation is used.</td>
    </tr>
    <tr>
      <td valign="top">\c CMAKE_BUILD_TYPE</td>
      <td>Should be either 'Release' (optimization enabled) or 'Debug' (debug info and
          precondition/postcondition checks enabled).
          @n The default is 'Release'.</td>
    </tr>
    <tr>
      <td valign="top">\c CMAKE_CXX_COMPILER</td>
      <td>Defines the C++ compiler to use.</td>
    </tr>
    <tr>
      <td valign="top">\c CMAKE_C_COMPILER</td>
      <td>Defines the C compiler to use. This should match the C++ compiler.
      Mixing compilers (e.g., <i>clang++</i> for C++ and <i>gcc</i> for C) can
      lead to undefined behaviour as some internal settings (e.g., %OpenMP
      support) are determined using the C compiler and are assumed to be the
      same for the C++ compiler.</td>
    </tr>
    <tr>
      <td valign="top">\c HAS_XSERVER</td>
      <td>Defines if a running X Server is available when building OpenMS.
      As building parts of the documentation and running certain tests requires
      a running X Server, this flag can be used to disable those parts of the
      documentation and the tests that need an X Server. (Default: On)</td>
    </tr>
    <tr>
      <td valign="top">\c WITH_GUI</td>
      <td>Defines if the OpenMS GUI tools (TOPPView, TOPPAS) should be built or
      not. These components need Qt > 4.7 which may not be available on some
      systems (specifically older CentOS / RHEL servers). If you plan to use
      OpenMS without a GUI, set this flag to "Off" (Default: On)</td>
    </tr>
    <tr>
      <td valign="top">\c ENABLE_TUTORIALS</td>
      <td>Defines if a OpenMS should build and install the pdf tutorials.
      (Default: On)</td>
    </tr>
    <tr>
      <td valign="top">\c SEARCH_ENGINES_DIRECTORY (optional)</td>
      <td>The location where the ID search engines (X!Tandem, OMMSA, MyriMatch)
      are located. This directory should have the same structure as the example
      in the search engine repository at
      https://open-ms.svn.sourceforge.net/svnroot/open-ms/THIRDPARTY/SEARCHENGINES/.

      This directory is needed to build the installer for %OpenMS.</td>
    </tr>
    <tr>
      <td valign="top">\c PYOPENMS</td>
      <td>Use ON to also build the Python bindings, see also @ref pyOpenMS.</td>
    </tr>
  </table>

  A full list of the CMake variables is shown when you execute

  \code
  ccmake .
  \endcode

  This works only after having executed \c cmake once (see @ref install_linux_openms)

<br/>
<br/>

<hr/>

  @section install_linux_testing_openms Testing your OpenMS/TOPP installation

  After you have installed %OpenMS and TOPP, you should test your installation by executing the following command:

@code
make test
@endcode

or

@code
ctest
@endcode

  Using ctest you can also execute only single tests by using the -R switch or run tests in parallel using the -j switch.

@code
ctest -R TOPP_ -j 4
@endcode

  Will run all TOPP test using 4 jobs. Make sure that you have build all tests beforehand by executing.

@code
make
@endcode

*/
