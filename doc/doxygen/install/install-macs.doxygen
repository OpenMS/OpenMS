/**

  @page install_mac Building OpenMS on Mac OS X

  @section install_mac_read Introduction

  This document addresses %OpenMS users and explains the installation
  procedure for building %OpenMS from its sources. If you only want to use the
  %OpenMS Proteomics Pipeline (TOPP), you are strongly encouraged to
  <b>download the binary installer</b> (see
  <a href="http://www.OpenMS.de" target="_blank">here</a>), instead of building
  %OpenMS from sources. Be aware though that we do not provide binary
  installers for every MacOS version. For more information read the install
  instructions for the TOPP binaries.

	This document especially considers the installation of several libraries that
  are required by %OpenMS. Most of these libraries are made available in our
  "contrib-package" (see below).
  <br>
  If you encounter errors during configuring/compiling our software, have a
  look at our "Known Issues" section (documentation), maybe the error is
  already known. If not, please write to the mailing list or report the error
  on our <a href="https://github.com/OpenMS/OpenMS/issues" target="_new">issue tracker</a>.

  @subsection hint_package_manager Package Mangers

  We suggest to use either <a href="http://mxcl.github.com/homebrew/" target="_new">Homebrew</a>
  or <a href="http://www.macports.org" target="_new">MacPorts</a> as they
  contain most of the requirements for %OpenMS and ease the process of
  upgrading those dependencies.

  @subsection required_apps Required applications

  In order to compile %OpenMS, several applications need to be installed:
  <ul>
   <li>Xcode (version 4.0 or higher) is required to build %OpenMS (the current version can be obtained from the Mac App Store). More details can be found on the <a href="https://developer.apple.com/xcode/" target="_new" title="Xcode 4 Downloads and Resources.">Apple Developer Site</a>.</li>
   @note Since Xcode 4.3 you also need to install the "Command Line Tools" to access the compilers shipped with Xcode from the command line. An explanation on how to install the Command Line Tools can be found <a href="http://developer.apple.com/library/ios/#documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_4_3.html#//apple_ref/doc/uid/1006-SW1" target="_new" title="Install Command Line Tools for Xcode">here</a>.
   <li>CMake (version 2.8.3 or higher) is required to configure and build the %OpenMS as well as some of its dependencies.</li>
	 <li>Qt4 (version 4.5 or higher) containing qmake and the header files is required (either a dmg file or source packages can be obtained from <a href="http://qt-project.org" target="_new" title="Get Qt">http://qt-project.org/</a>)
   @note Qt 5 is not yet supported by %OpenMS.</li>
  </ul>

  If your %OpenMS version is a development version obtained via git, the
  following applications are needed in order to create the %OpenMS
  documentation:

  <ul>
   <li><a href="http://www.doxygen.org/index.html">Doxygen</a> is used to generate the %OpenMS documentation.</li>
   @note
   We recommend using at least doxygen 1.7.1 (or above) since some 1.6.X versions have a serious bug that makes building the %OpenMS documentation impossible.
   <li>pdflatex is required to generate the tutorial pdfs. The latest MacTeX release can be downloaded <a href="http://tug.org/mactex/">here</a></li>
  </ul>

<HR>

 @section install_mac_contrib Installing the contrib package

  In order to facilitate the installation of the libraries required for
  %OpenMS, we composed a "contrib-package" containing the libraries Boost,
  Eigen, WildMagic, libSVM, SeqAn, glpk, zlib, bzip2 and Xerces-C.

  The contrib package is contained in the %OpenMS release package and is
  available inside the <tt>contrib</tt> directory in the %OpenMS directory.

  If you are using the developer version of %OpenMS, you have to clone the
  contrib from github using

\code
  git clone  https://github.com/OpenMS/contrib.git
\endcode

  CMake is used to check your system and build the contrib libraries.

  @note
  As of %OpenMS 1.10 compiling %OpenMS with the Apple GCC 4.2 compiler can
  lead to errors due to the update of BOOST to version 1.52. Please use the
  shipped clang compiler instead (clang/clang++) to avoid this problem.

  <OL>
    <LI>Open a Terminal (/Applications/Utilities/Terminal.app)</LI>
    <LI>Create a build directory for the %OpenMS contrib e.g.,

\code
mkdir ~/openms-development/contrib_build
\endcode
    </LI>
    <LI>Enter the created directory and call cmake to build the contrib

\code
cd <path_to_contrib_build>
cmake -D CMAKE_CXX_COMPILER=clang++ -D CMAKE_C_COMPILER=clang <path_to_contrib>
\endcode

Example:

\code
cd ~/openms-development/contrib_build
cmake -D CMAKE_CXX_COMPILER=clang++ -D CMAKE_C_COMPILER=clang ~/openms-development/contrib
\endcode
    </LI>
  </OL>

  If everything worked, the following sub-directories were created under in
  the contrib build directory:

  <ul>
    <li><tt>lib/</tt> containing the libraries needed by %OpenMS.</li>
    <li><tt>include/</tt> containing the header files needed for %OpenMS.</li>
  </ul>

  @note To avoid problems while building the libraries contained in the contrib
  package, the path to your contrib directory should not contain any spaces.

  @subsection using_system_libs Using system libraries

  Beside the possibility to use the contrib libraries shipped with %OpenMS
  you can also use libraries installed via your package manager (homebrew or
  macports).

  For homebrew the following sequence of commands installs all libraries
  required by %OpenMS.

\code
  # tap the science tap
  brew tap homebrew/science
  brew tap homebrew/versions
  brew install seqan libsvm xerces-c boost gsl114 coinmp glpk
\endcode

  For macports the following sequence of commands installs some of the
  libraries required by %OpenMS.

\code
  sudo port install libsvm xercesc3 boost glpk
\endcode

 The rest needs to be installed via the contrib.

\code
  # assuming you start in ~/openms-development
  git clone https://github.com/OpenMS/contrib.git
  mkdir contrib-build
  cd contrib-build
  cmake -D CMAKE_CXX_COMPILER=clang++ -D CMAKE_C_COMPILER=clang -D BUILD_TYPE=SEQAN ~/openms-development/contrib
  cmake -D BUILD_TYPE=GSL .
  cmake -D BUILD_TYPE=COINOR .
\endcode

<HR>

  @section install_mac_openms Installing OpenMS

  Assuming you have successfully installed the required libraries, you need to
  get the %OpenMS source code. The latest stable version of %OpenMS can be
  found on the %OpenMS
  <a href="http://www.openms.de/downloads/" target="_blank">download</a> page.
  If you want to work with the latest development version you need to obtain
  the code via git.

\code
  # assuming you start in ~/openms-development
  git clone https://github.com/OpenMS/OpenMS.git
\endcode

    <OL>
      <LI>Open a Terminal (/Applications/Utilities/Terminal.app)</LI>
      <LI>Create a build directory for %OpenMS, e.g.,

@code
mkdir ~/openms-development/openms_build
@endcode
      </li>
      <LI>Call cmake to create the build system there

@code
cd <path_to_OpenMS_build>
cmake -D CMAKE_FIND_ROOT_PATH=<path_to_contrib_build> <path_to_OpenMS>
@endcode

  You can set CMake variables using the <code>-D VARIABLE=VALUE</code> option.
  A full list of the CMake variables is shown when you execute

@code
ccmake ~/openms-development/openms_build
@endcode

  @note You need to execute <code>cmake</code> at least once before
        <tt>ccmake</tt> can be used.

</OL>

  The most important CMake variables are:

  <table style="border-style:solid; border-collapse:collapse; border-color:#c0c0c0;">
    <tr>
      <td valign="top">\c CMAKE_FIND_ROOT_PATH</td>
      <td>Additional search path for the contrib libraries.
          If not set the the location is assumed to be
          <tt>&lt;path_to_OpenMS&gt;/contrib</tt>.
          If you want to use libraries installed via homebrew or macports you
          need to provide the corresponding paths

          <code>-D CMAKE_FIND_ROOT_PATH=/usr/local</code> for homebrew
          <code>-D CMAKE_FIND_ROOT_PATH=/opt/local</code> for macports

          Please keep in mind that macports does not provide all libraries so
          you need to provide also the path to your self-build contrib.
          <code>-D CMAKE_FIND_ROOT_PATH="/opt/local;~/openms-development/contrib-build"</code>
      </td>
    </tr>
    <tr>
      <td valign="top">\c QT_QMAKE_EXECUTABLE</td>
      <td>Defines the Qt 'qmake' application to identify the corresponding Qt installation.
      This variable only needs to be set if \c qmake is not in the PATH.</td>
    </tr>
    <tr>
      <td valign="top">\c CMAKE_BUILD_TYPE</td>
      <td>Should be either 'Release' (optimization enabled) or 'Debug' (debug info and
          precondition/postcondition checks enabled).
          @n The default is \c Release.</td>
    </tr>
    <tr>
      <td valign="top">\c CMAKE_CXX_COMPILER</td>
      <td>Defines the C++ compiler to use.</td>
    </tr>
    <tr>
      <td valign="top">\c CMAKE_C_COMPILER</td>
      <td>Defines the C compiler to use. This should match the C++ compiler.
       Mixing compilers (e.g., \c clang++ for C++ and \c gcc for C) can lead to
       undefined behavior as some internal settings (e.g., %OpenMP support) are
       determined using the C compiler and are assumed to be the same for the
       C++ compiler.</td>
    </tr>
    <tr>
      <td valign="top">\c SEARCH_ENGINES_DIRECTORY (optional)</td>
      <td>The location where the ID search engines are located. This directory
       should have the same structure as the one in the %OpenMS svn repository.
      This directory is needed to build the installer for %OpenMS.</td>
    </tr>
    <tr>
      <td valign="top">\c PYOPENMS</td>
      <td>Use ON to also build the Python bindings, see also @ref pyOpenMS.</td>
    </tr>
  </table>

  After CMake was executed, you can list the make targets by calling:

\code
make targets
\endcode

  In order to build the %OpenMS library, the TOPP tools, tests and this
  documentation execute the following command:

\code
make
\endcode

  The TOPP tools should now be ready to use. The executables are located in the
  \c bin folder of the build directory. Add this folder to your
  <b><tt>PATH</tt></b> variable for easy access.

<HR>

 @section install_mac_testing_openms Testing your OpenMS / TOPP installation

  After you have installed %OpenMS and TOPP, you should test your installation by executing the following command:

@code
make test
@endcode

or

@code
ctest
@endcode

  Using ctest you can also execute only single tests by using the -R switch or run tests in parallel using the -j switch.

@code
ctest -R TOPP_ -j 4
@endcode

  Will run all TOPP test using 4 jobs. Make sure that you have build all tests beforehand by executing.

@code
make
@endcode

*/
