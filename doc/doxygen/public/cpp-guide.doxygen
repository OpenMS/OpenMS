/**

@page cpp_guide CPP Guide

The following page contains general C++ guidelines that are not OpenMS-specific.

<h1><a class="anchor" id="the_using_directive"></a>The <code>using</code> directive</h1>

Using <code>namespace OpenMS</code>, <code>namespace std</code>, or similar in <code>.h</code> files may cause name clashes, therefore it is advised against.

@warning Don't import complete namespaces to the scope into <code>.cpp</code> files. Instead, introduce individual symbols to the scope where you need them. For example, write using <code>std::vector;</code> instead of <code>using namespace std;</code>. This immediately gives a hint to where the symbol is defined as well.

<h1><a class="anchor" id="uint_vs_size"></a><code>UInt</code> vs <code>Size</code></h1>

When working with <code>STL</code> types (especially vectors), assign the return value of a <code>.size()</code> operation to the OpenMS type <code>Size</code>, which is defined as follows:

@code{.cpp}
// OpenMS/include/CONCEPT/Types.h
typedef size_t Size;
@endcode

Here is an example of how to correctly use <code>Size</code>.

@code{.cpp}
std::vector<String> myVec;
myVec.push_back("hello");
for (Size i=0; i<myVec.size(); ++i)
{
  std::cout << "Index: " << i << " Value: " << myVec[i] << std::endl;
}
@endcode

@warning Don't use <code>UInt</code> as a substitute for <code>Size</code>. Even though <code>UInt</code> and <code>Size</code> are equivalent on prominent 32 bit systems, they are usually different types on 64 bit systems, where <code>UInt</code> is 32 bit, whereas <code>Size</code> is 64 bit depending on the platform. Using <code>UInt</code> leads to warnings (at best) and may break your code.

<code>Size</code> is an unsigned type. If you need a signed type (e.g. when comparing length of vectors), use <code>SignedSize</code> (also defined in <code>types.h</code>)

Use <code>SignedSize</code> if you require loop variables with negative values. Here is an example:

@code{.cpp}
std::vector<String> myVec;
myVec.push_back("hello");
for (SignedSize i=0; i<(SignedSize)myVec.size() - 1; ++i)
// never use Size here, because if myVec.size()==0 then Size x = 0 - 1; gives some really BIG number!
{
  std::cout << "Index: " << i << " Value: " << myVec[i] << std::endl;
}
@endcode

@section math_functions Math functions

@warning Don't use <code>GCC</code> to access common math functions like <code>trunc()</code>, <code>round()</code>, <code>log2()</code>, etc. As this is not a C++ Standard requirement, Microsoft have decided to not include them. If <code>GCC</code> is used, it will break the windows port of OpenMS.

Instead, do the following to use these common math functions:
<ul>

<li><b><code>ceil()</code></b> and <b><code>floor()</code></b></li>
<p>To use these functions, use the following directive:</p>
@code{.cpp}
#include cmath
@endcode
<p>Find information about math functions available at the <a href="http://www.cplusplus.com/">cplusplus</a> website or for VisualStudio specific problems: <a href="http://msdn.microsoft.com/en-us/visualc/default.aspx">MSDN</a>.</p>

<li><b><code>round()</code></b></li>
<p>OpenMS provides a <code>Math::round()</code> function for convenience (see <code>MATH/MISC/MathFunctions.h</code>).</p>

<li><b><code>isnan()</code></b> and <b><code>isinf()</code></b></li>
<p>Use the <code>boost</code> library. Include:</p>
@code{.cpp}
#include <boost/math/special_functions/fpclassify.hpp>
@endcode

Then use <code>boost::math::isinf(myNumber)</code> and <code>boost::math::isnan(myNumber)</code>.

<li><b><code>log()</code></b></li>
<p>Windows does not support <code>log2()</code>; use <code>log(x)/log(2)</code> instead.</p>
</ul>

@section value_vs_reference Pass-by-value versus pass-by-reference

Except of primitive types (<code>int</code>, <code>double</code>, <code>float</code>, ....) all method arguments should be passed as non-mutable references.

Return types of methods should be non-mutable references as well, where possible. Sometimes, references can't be used as the retuned value is constructed in the method. If the constructed type is large, save computation time with:

@code{.cpp}
//Bad idea
LargeObject someFunction()
{
  LargeObject tmp = ...
  return tmp;
}
//Better idea
void someFunction(LargeObject& obj)
{
  obj = ...
}
@endcode

<h1><a class="anchor" id="what_is_openms_dllapi"></a>What is <code>OPENMS_DLLAPI</code>?</h1>
<code>OPENMS_DLLAPI</code> is a preprocessor macro and ensures that Visual Studio exports this class into the <code>DLL</code> when building the <code>DLL</code> or references the <code>DLL</code> when building an executable.

The <code>OPENMS_DLLAPI</code> macro is defined empty on other platforms, but it might still confuse the syntax parsing of the text editor or IDE. If you are using the Eclipse Platform, fix this at: <b>Project</b> > <b>Properties</b> > <b>C/C++ Include Paths and Symbols</b>.

<h1><a class="anchor" id="when_to_use_openms_dllapi"></a>When to use <code>OPENMS_DLLAPI</code></h1>
When you've written a new OpenMS class, which is not a template class, insert the macro into the header like this:

@code{.cpp}
class Myclass
{ ...
@endcode

becomes:

@code{.cpp}
class OPENMS_DLLAPI Myclass
{ ...
@endcode

It is enough to prefix the class with the macro. Do not prefix the members or member functions.

<code>OPENMS_DLLAPI</code> is also required for structs, global (including <code>extern</code>) variables and global functions, as long as they are not templates. Never prefix templates with <code>OPENMS_DLLAPI</code>. The only exception to this rule is when a template is fully specialized (i.e. it can be instantiated). Additionally, prefix nested public structs/classes with <code>OPENMS_DLLAPI</code>, otherwise you cannot use them from outside the library.

A prominent global function is "operator <<", which is overloaded quite often for OpenMS classes. Unless it is templatized, prefix it with <code>OPENMS_DLLAPI</code>. If the operator is declared a friend of some class, also make sure the friend statement contains the <code>OPENMS_DLLAPI</code> keyword. Otherwise, you will get inconsistent DLL-linkage. For example, use:

@code{.cpp}
// Adduct.h
class OPENMS_DLLAPI Adduct
{
  ...
  friend OPENMS_DLLAPI std::ostream& operator << (std::ostream& os, const Adduct& a);
  ...
}
// Adduct.C
namespace OpenMS
{
  OPENMS_DLLAPI std::ostream& operator << (std::ostream& os, const Adduct& a)
  {
    ...
  }
}
@endcode

If you forget the <code>OPENMS_DLLAPI</code> keyword, the DLL will have missing symbols and executables might not be able to link against the DLL. When compiled with <code>gcc</code> you will get <code>.. undefined reference to ..</code> errors.

@section pointers_vs_references Pointers vs references

Avoid using pointers. Pointers tend to cause segmentation faults. Try to use references instead.

@section iterators Iterators

In simple looping constructs, iterators are generally preferable to indexed access. Prefer <code>++i</code> to <code>i++</code>, because the preincrement operator can save a copy constructor. Use <code>const_iterators</code> where possible to help avoid unwanted side effects.

@section includes Includes

<code>includes</code> in header files should be avoided and replaced by forward declarations. Unnecessary <code>includes</code> cause longer compile times after changes in OpenMS header.

Reasons for includes in header files are:
<ul>
<li>Headers of base classes have to be included in the header of the derived classes.</li>
<li>If a class has members of type <code>T</code> (not <code>T*</code> or <code>T&</code>) the header has to be included.</li>
<li>Headers of template classes have to be included.</li>
</ul>
An example class could look like this:

@code{.cpp}
#include <QtGui/QMainWindow>
#include <QtGui/QPainter>
// Forward declaration in main namespace
class QLabel;
namespace OpenMS
{
  // Forward declaration in OpenMS namespace
  class Spectrum1DWidget;
  class Dummy
    : public QMainWindow
  {
    ...
    protected:
      Spectrum1DWidget* parent_;
      QLabel* label_;
      QPainter painter_;
  }
}
@endcode

@note In OpenMS, Qt headers have to be included with the library prefix.

@section input_output Input/Output

Code like <code>std::cout << "example" << std::endl;</code> forces the output buffer to be flushed, i.e. written to disk immediately, which is not ideal. Get used to writing code like <code>std::cout << "example\n";</code>. Debugging output can be an exception, because the content of the stream buffer may be lost upon segfault etc..

Write many digits to avoid unnecessary rounding errors. In particular, using standard output stream operators, i.e. << for doubles and floats should be avoided when full precision is required because by default, not all significant digits will be written. Before you start using <code>os.precision(writtenDigits(FloatingPointType()));</code> and alike, it is strongly advised to convert to an <code>OpenMS::String</code>, i.e. <code>os << String(my_number)</code> because it's faster, and gives you all significant digits for each type (6 digits for <code>float</code>, 15 for <code>double</code>). Similarly, input stream operators are also slow, especially in VisualStudio, so switching to <code>OpenMS::String::toDouble()</code> is advised for performance reasons. If you do not need all significant digits, simply invoke <code>String(my_number, full_precision = false)</code> to get up to only three fractional digits for <code>float</code> and <code>double</code> types. For <code>Integer</code> types, there is no problem with streams, but again: <code>OpenMS::String(int i)</code> is faster. There is usually no heap allocation overhead for strings because of Small String Optimizations (SSO).

*/
