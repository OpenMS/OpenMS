// --------------------------------------------------------------------------
//                   OpenMS -- Open-Source Mass Spectrometry               
// --------------------------------------------------------------------------
// Copyright The OpenMS Team -- Eberhard Karls University Tuebingen,
// ETH Zurich, and Freie Universitaet Berlin 2002-2017.
// 
// This software is released under a three-clause BSD license:
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//  * Neither the name of any author or any participating institution 
//    may be used to endorse or promote products derived from this software 
//    without specific prior written permission.
// For a full list of authors, refer to the file AUTHORS. 
// --------------------------------------------------------------------------
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL ANY OF THE AUTHORS OR THE CONTRIBUTING 
// INSTITUTIONS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 
// --------------------------------------------------------------------------
// $Maintainer:  $
// $Authors: Hannes Roest $
// --------------------------------------------------------------------------

/**

@page pyOpenMS pyOpenMS (Python bindings)

PyOpenMS offers Python bindings to a large part of the %OpenMS API. 

<ul>
  <li style="list-style-type: none;"><a href="#install">1. Install Instruction</a></li> 
  <li style="list-style-type: none;"><a href="#build">2. Build Instructions</a></li> 
  <li style="list-style-type: none;"><a href="#wrap">3. Wrap new Classes</a></li> 
  <ul>
    <li style="list-style-type: none;"><a href="#wrap-py">3.1 General concept</a></li> 
    <li style="list-style-type: none;"><a href="#wrap-new">3.2 How to wrap a class</a></li> 
    <li style="list-style-type: none;"><a href="#wrap-addons">3.2 Use ./addons</a></li> 
  </ul>
</ul> 

<H1 id="install" style="margin-top:40px; border-top:4px solid grey; text-align:left;">Install Instructions</H1>

We offer pre-built packages on <a href="https://pypi.python.org/pypi/pyopenms">PyPI (pyopenms package)</a>,
which does not require compilation. If you want to use pyOpenMS in production,
we recommend to follow the binary installation instructions specific for your platform on <a href="https://pypi.python.org/pypi/pyopenms">PyPI</a>.

<H1 id="build" style="margin-top:40px; border-top:4px solid grey; text-align:left;">Build Instructions</H1>

In order to configure and build pyOpenMS successfully from source, you will
need to follow these steps. Please note that compiling pyOpenMS requires
substantial memory resources. Currently, Python 2.7 as well as 3.x are
officially supported.

<ol>
  <li> 
    Install Python (preferably, 2.7 but it may run also run with Python
    2.6). Alternatively, also Python 3.x will work and the same build instructions apply.
    Use <a href="https://www.continuum.io/downloads">Anaconda</a> on
    Microsoft Windows. 
  </li>

  <li>
    On Microsoft Windows: you need the 64 bit C++ compiler from Visual Studio
    2008.  This is important, else you get a different clib than Python 2.7 is
    built with, and pyOpenMS will crash on import.
  </li>

  <li>
    The easiest way to install all necessary Python packages on which pyOpenMS
    depends is through virtualenv:
    @code
    $ virtualenv pyopenms_venv
    $ source pyopenms_venv/bin/activate
    $ pip install -U setuptools
    $ pip install -U pip
    $ pip install -U autowrap
    $ pip install -U nose
    $ pip install -U numpy
    $ pip install -U wheel
    @endcode
    If this worked for you, you can directly skip to the "configure" step. On
    Microsoft Windows, you will have virtualenv if you install through
    Anaconda.
  </li>

  <li>
   If not using virtualenv, install first setuptools, see: https://pypi.python.org/pypi/setuptools (you will need at least version 0.12)
  </li>

  <li> If not using virtualenv, install pip and use it to install other required Python modules

    @code
    $ easy_install pip
    $ pip install autowrap
    $ pip install nose
    @endcode

    If Cython doesn't get installed, install it with 
    @code
    $ easy_install cython
    @endcode

    Note that when using pip without root permissions, you have to add a path
    prefix: --install-option="--prefix=/path/to/local/python/"
  </li>


  <li> If not using virtualenv, install numpy next:
         - on Debian/Ubuntu, install the package "python-numpy"
         - on 64 bit Windows 7: get it from http://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy
  </li>


  <li>Configure %OpenMS with pyOpenMS: 
      execute cmake as usual, but with parameters "-DPYOPENMS=ON". Also, if
      using virtualenv, add "-DPYTHON_EXECUTABLE:FILEPATH=`which python`" to
      ensure that the correct Python executable is used.
     <p>
     On windows add: "-D CMAKE_BUILD_TYPE=Release" as the standard python27.dll
     is built in release mode.
     </p>

     @code
     $ cmake -DPYOPENMS=ON
     @endcode
  </li>

  <li> Build pyOpenMS (now there should be pyOpenMS specific build targets):

     @code
     $ make pyopenms
     @endcode

   on Linux, ensure that the libOpenMS.so is in your $LD_LIBRARY_PATH (it needs to be accessible for Python) 
  </li>

  <li> Run the Python specific tests to make sure that everything went well 

     @code
     $ cd pyOpenMS
     $ python run_nose.py
     @endcode

     run mem leak test:

     @code
     $ python run_memleaks.py
     @endcode
  </li>


  <li> Optionally:
   If you want to install locally:

     @code
     $ python setup.py install
     @endcode
   If you want to build Python installers:

     @code
     $ make pyopenms_bdist_egg
     @endcode

      or

     @code
     $ make pyopenms_bdist
     @endcode

     you find the built installer files in pyOpenMS/dist
  </li>

</ol>


<H1 id="wrap" style="margin-top:40px; border-top:4px solid grey; text-align:left;">Wrapping Workflow and wrapping new Classes</H1>


<H2 id="wrap-py" style="margin-top:40px; border-top:4px solid grey; text-align:left;">How pyOpenMS wraps Python classes</H2>
General concept of how the wrapping is done (all files are in @c src/pyOpenMS/): 

- Step 1: The author declares which classes and which functions of these
  classes s/he wants to wrap (expose to Python). This is done by writing the
  function declaration in a file in the @c pxds/ folder.
- Step 2: The Python tool "autowrap" (developed for this project) creates the
  wrapping code automatically from the function declaration - see
  https://github.com/uweschmitt/autowrap for an explanation of the autowrap
  tool. 
  Since not all code can be wrapped automatically, also manual code can be
  written in the @c addons/ folder. Autowrap will create an output file at
  @c pyopenms/pyopenms.pyx which can be interpreted by Cython.
- Step 3: Cython translates the @c pyopenms/pyopenms.pyx to C++ code at
  @c pyopenms/pyopenms.cpp 
- Step 4: A compiler compiles the C++ code to a Python module which is then
  importable in Python with <code>import pyopenms</code>

<p>
Maintaining existing wrappers: If the C++ API is changed, then pyOpenMS will
not build any more.  Thus, find the corresponding file in the @c pyOpenMS/pxds/
folder and adjust the function declaration accordingly.</p>

<H2 id="wrap-new" style="margin-top:40px; border-top:4px solid grey; text-align:left;">How to wrap new classes</H2>

<H3 id="wrap-simple" style="margin-top:40px; border-top:4px solid grey; text-align:left;">A simple example</H3>

To wrap a new %OpenMS class: Create a new "pxd" file in the folder <code>./pxds</code>. As
a small example, look at the <code>CVTerm.pxd</code> to get you started. Start with the
following structure:

@code
from xxx cimport *
cdef extern from "<OpenMS/path/to/header/Classname.h>" namespace "OpenMS":

    cdef cppclass ClassName(DefaultParamHandler):
        # wrap-inherits:
        #    DefaultParamHandler

        ClassName() nogil except +
        ClassName(ClassName) nogil except +

@endcode

- make sure to use @c ClassName: instead of @c ClassName(DefaultParamHandler) to
  wrap a class that does not inherit from another class and also remove the two
  comments regarding inheritance below that line.
- always use @c cimport and not Python @c import
- always add default constructor AND copy constructor to the code (note that the C++
  compiler will add a default copy constructor to any class, so there is always
  one if it is not declared, see http://www.cplusplus.com/articles/y8hv0pDG/ "The
  implicit copy constructor does a member-wise copy of the source object.")
- to expose a function to Python, copy the signature to your pxd file, e.g.
  @c DataValue @c getValue() and make sure you @c cimport all corresponding classes.
  Replace @c std::vector with the corresponding vector from @c libcpp.vector (see for example @c PepXMLFile.pxd)
- Remember to include a copy constructor (even if none was declared in the C++
  header file) since Cython will need it for certain operations. Otherwise you
  might see error messages like <code>item0.inst = shared_ptr[_ClassName](new _ClassName(deref(it_terms))) Call with wrong number of arguments</code> 

<H3 id="wrap-complicated" style="margin-top:40px; border-top:4px solid grey; text-align:left;">A further example</H3>

A slightly more complicated class could look like this, where we demonstrate how to handle templated classes and static methods:

@code
from xxx cimport *
from AbstractBaseClass cimport *
from AbstractBaseClassImpl1 cimport *
from AbstractBaseClassImpl2 cimport *
cdef extern from "<OpenMS/path/to/header/Classname.h>" namespace "OpenMS":

    cdef cppclass ClassName[T](DefaultParamHandler):
        # wrap-inherits:
        #    DefaultParamHandler
        # 
        # wrap-instances:
        #   ClassName := ClassName[X]
        #   ClassNameY := ClassName[Y]

        ClassName() nogil except +
        ClassName(ClassName[T]) nogil except + # wrap-ignore

        void method_name(int param1, double param2) nogil except +
        T method_returns_template_param() nogil except +

        size_t size() nogil except +
        T operator[](int) nogil except + # wrap-upper-limit:size()

        libcpp_vector[T].iterator begin() nogil except +  # wrap-iter-begin:__iter__(T)
        libcpp_vector[T].iterator end()   nogil except +  # wrap-iter-end:__iter__(T)

        void getWidgets(libcpp_vector[String] & keys) nogil except +
        void getWidgets(libcpp_vector[unsigned int] & keys) nogil except + # wrap-as:getWidgetsAsIntegers

        # C++ signature: void process(AbstractBaseClass * widget)
        void process(AbstractBaseClassImpl1 * widget) nogil except +
        void process(AbstractBaseClassImpl2 * widget) nogil except +

cdef extern from "<OpenMS/path/to/header/Classname.h>" namespace "OpenMS::Classname<OpenMS::X>":

    void static_method_name(int param1, double param2) nogil except + # wrap-attach:ClassName

cdef extern from "<OpenMS/path/to/header/Classname.h>" namespace "OpenMS::Classname<OpenMS::Y>":

    void static_method_name(int param1, double param2) nogil except + # wrap-attach:ClassNameY

@endcode

Here the copy constructor will not be wrapped but the Cython parser will import
it from C++ so that is is present (using wrap-ignore). The <tt>operator[]</tt>
will return an object of type <tt>X</tt> or <t>Y</t> depending on the template
argument and contain a guard that the number may not be exceed <tt>size()</tt>.

The wrapping of iterators allows for iteration over the objects inside the
<tt>Classname</tt> container using the appropriate Python function (here
<tt>__iter__</tt> with the indicated return type <t>T</t>).

The <tt>wrap-as</tt> keyword allows the Python function to assume a different
name. 

Note that pointers to abstract base classes can be passed as arguments but the
classes have to be known at compile time, e.g. the function <tt>process</tt>
takes a pointer to <tt>AbstractBaseClass</tt> which has two known
implementations <tt>AbstractBaseClassImpl1</tt> and
<tt>AbstractBaseClassImpl2</tt>. Then, the function needs to declared and
overloaded with both implementations as arguments as shown above.

<H3 id="wrap-complicated" style="margin-top:40px; border-top:4px solid grey; text-align:left;">An example with handwritten addon code</H3>

A more complex examples requires some hand-written wrapper code
(pxds/Classname.pxd), for example for singletons that implement a <tt>getInstance()</tt>
method that returns a pointer to the singleton resource. Note that in this case
it is quite important to not let autowrap take over the pointer and possibly
delete it when the lifetime of the Python object ends (leading to Segfaults in
Python).

@code
from xxx cimport *
cdef extern from "<OpenMS/path/to/header/Classname.h>" namespace "OpenMS":

    cdef cppclass ModificationsDB "OpenMS::ModificationsDB":
        # wrap-manual-memory
        # wrap-hash:
        #   getFullId().c_str()

        ClassName(ClassName[T]) nogil except + # wrap-ignore

        void method_name(int param1, double param2) nogil except +

        int process(libcpp_vector[Peak1D].iterator, libcpp_vector[Peak1D].iterator) nogil except + # wrap-ignore

cdef extern from "<OpenMS/path/to/header/Classname.h>" namespace "OpenMS::Classname":

    const ClassName* getInstance() nogil except + # wrap-ignore

@endcode

Here the <tt>wrap-manual-memory</tt> keywords indicates that memory management
will be handled manually and autowrap can assume that a member called
<tt>inst</tt> will be provided that implements a <tt>gets()</tt> method to
obtain a pointer to an object of C++ type <tt>Classname</tt>.

We then have to provide such an object (addons/Classname.pyx):

@code
# This will go into the header
# NOTE: _Classname is the C++ class while Classname is the Python class
from Classname cimport Classname as _Classname
cdef class ClassnameWrapper:
    # A small utility class holding a ptr and implementing get()
    cdef const _Classname* wrapped
    cdef setptr(self, const _Classname* wrapped): self.wrapped = wrapped
    cdef const _Classname* get(self) except *: return self.wrapped

    # This will go into the class
    # NOTE: using shared_ptr for a singleton will lead to segfaults, use raw ptr instead
    cdef ClassnameWrapper inst

    def __init__(self):
      self.inst = ClassnameWrapper()
      self.inst.setptr(_getInstance_Classname()) # calls the import getInstance method to obtain raw ptr

    def __dealloc__(self):
      # Careful here, the wrapped ptr is a single instance and we should not
      # reset it, therefore use 'wrap-manual-dealloc'
      pass

    def process(self, Container c):
        return self.inst.get().process(c.inst.get().begin(), c.inst.get().end())

@endcode

Note how the manual <tt>wrapping</tt> of the process functions allows us to
access the <tt>inst</tt> pointer of the argument as well as of the object
itself, allowing us to call C++ functions on both pointers. This makes it easy
to generate the required iterators and process the container efficiently.

<H3 id="wrap-complicated" style="margin-top:40px; border-top:4px solid grey; text-align:left;">Considerations and limitations</H3>

Further considerations and limitations:

- Inheritance: there are some limitations, see for example @c Precursor.pxd

- Reference: arguments by reference may be copied under some circumstances. For
  example, if they are in an array then not the original argument is handed
  back, so comparisons might fail. Also, simple Python types like int, float
  etc cannot be passed by reference.

- operator+=: see for example <code>AASequence.iadd</code> in <code>AASequence.pxd</code>

- operator==, !=, <=, <, >=, > are wrapped automatically

- Iterators: some limitations apply, see MSExperiment.pxd for an example

- copy-constructor becomes __copy__ in Python

- shared pointers: is handled automatically, check DataAccessHelper using <code>shared_ptr[Spectrum]</code>. Use <code>from smart_ptr cimport shared_ptr</code> as import statement

These hints can be given to autowrap classes (also check the autowrap documentation):
- wrap-ignore: is a hint for autowrap to not wrap the class (but the declaration might still be important for Cython to know about) 
- wrap-instances: for templated classes (see MSSpectrum.pxd)
- wrap-hash: hash function to use for <tt>__hash__</tt> (see Residue.pxd)
- wrap-manual-memory: hint that memory management will be done manually

These hints can be given to autowrap functions (also check the autowrap documentation):
- wrap-ignore: is a hint for autowrap to not wrap the function (but the declaration might still be important for Cython to know about) 
- wrap-as: see for example AASequence ":"
- wrap-iter-begin, wrap-iter-end (see ConsensusMap.pxd)
- wrap-attach: enums, static methods (see for example VersionInfo.pxd)
- wrap-upper-limit:size or size() (see MSSpectrum.pxd)


<H3 id="wrap-addons" style="margin-top:40px; border-top:4px solid grey; text-align:left;">Wrapping code yourself in ./addons </H3>

Not all code can be wrapped automatically (yet). Place a file with the same (!)
name in the addons folder (e.g. myClass.px in pxds/ and myClass.pyx in addons)
and leave two lines empty on the top (this is important). Start with 4 spaces
of indent and write your additional wrapper functions, adding a wrap-ignore
comment to the pxd file. For some examples, look into the src/pyOpenMS/addons/ folder:


- IDRipper.pyx 
  - for a reference for both input and output of a complex STL construct 
    (map< String, pair<vector<>, vector<> > )
- MSQuantifications.pyx 
  - for a vector< vector< pair <String,double > > > as input in registerExperiment
  - for a map< String, Ratio> in getRatios to get returned
- QcMLFile.pyx 
  - for a map< String, map< String,String> > as input

- SequestInfile.pyx 
  - for a map< String, vector<String> > to get returned
- Attachment.pyx 
  - for a vector< vector<String> > to get returned

- ChromatogramExtractorAlgorithm.h 
  - for an example of an abstract base class (ISpectrumAccess), to see how it is handled please refer to the ./addons folder

Make sure that you _always_ declare your objects (all C++ and all Cython
objects need to be declared) using @c cdef Type name. Otherwise you get <code>Cannot
convert ... to Python object</code> errors.


*/
