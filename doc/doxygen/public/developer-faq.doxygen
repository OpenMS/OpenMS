/**

 @page developer_faq Developer FAQ

 The following contains answers to typical questions from developers about OpenMS.

 @tableofcontents

 @section general General

 @subsection difference_between_tool_and_util What is the difference between an OpenMS tool and util?

 A tool starts its lifecycle in <code>UTILS</code> and may exist without being thoroughly tested. Tools may be promoted from <code>UTILS</code> to <code>TOOLS</code> if they are stable enough, are fully tested, fully documented, and a test workflow exists.

 @subsection written_class_for_openms I have written a class for OpenMS. What should I do?

 Follow the @subpage coding_conventions coding conventions.

 To summarize:
 <ul>
 <li>The coding style (brackets, variable names, etc.) must conform to the conventions.</li>
 <li>The class and all the members should be properly documented.</li>
 <li>Check your code with the tool  <code>tools/checker.php</code>. Call <code>php tools/checker.php</code> for detailed instructions.</li>
 </ul>

 Please open a pull request and follow the <a href="https://openms.readthedocs.io/en/latest/docs/additional-resources/pull-request-checklist.html">pull request guidelines</a>.

 @subsection qt_designer_to_create_gui_widgets How to use QT designer to create GUI widgets?

 Create a class called <code>Widget: Create .ui-File</code> with <code>QT designer</code> and store it as <code>Widget.ui.</code>. Add the class to <code>sources.cmake</code>. From the <code>.ui-File</code> the file <code>include/OpenMS/VISUAL/UIC/ClassTemplate.h</code> is generated by the build system.

 @note Do not check in this file, as it is generated automatically when needed.

 Derive the class <code>Widget</code> from <code>WidgetTemplate</code>. For further details, see the <code>Widget.h</code> and <code>Widget.cpp</code> files.

 <h2><a class="anchor" id="can_start_section_macro_handle_two_or_more_arguments"></a>Can the <code>START_SECTION-macro</code> not handle template methods that have two or more arguments?</h2>

 Insert round brackets around the method declaration.

 @subsection where_are_the_binary_installers_created Where are the binary installers created?

 View the binary installers at the <a href="https://abibuilder.cs.uni-tuebingen.de/archive/openms/OpenMSInstaller/nightly/">build archive</a>.

 Please verify the creation date of the individual installers, as there may have been an error while creating the installer.

 @section build_system Build system

 The following questions are related to the build system.

 View the <a href="http://www.cmake.org">cmake website</a> for more information.

 <h2><a class="anchor" id="what_are_user_definable_cmake_cache_variables"></a>What are user definable <code>CMake</code> cache variables?</h2>

 User definable <code>CMake</code> cache variables allow the user to pass options to <code>CMake</code> which will influence the build system. The most important option that should be given when calling <code>CMake.exe</code> is:

 <code>CMAKE_FIND_ROOT_PATH</code>, which is where <code>CMake</code> will search for additional libraries if they are not found in the default system paths. By default we add <code>OpenMS/contrib</code>.

 If you have installed all libraries on your system already, there is no need to change <code>CMAKE_FIND_ROOT_PATH</code>. For
 <code>contrib</code> libraries, set the variable <code>CMAKE_FIND_ROOT_PATH</code>.

 On Windows, the <code>contrib</code> folder is required, as there are no system developer packages. To pass this variable to
 <code>CMake</code> use the <code>-D</code> switch e.g. <code>cmake -D CMAKE_FIND_ROOT_PATH:PATH="D:\\somepath\\contrib"</code>.

 Everything else can be edited using <code>ccmake</code> afterwards.

 The following options are of interest:
 <ul>
 <li><code>CMAKE_BUILD_TYPE</code>: To build Debug or Release version of OpenMS. Release is the default</li>
 <li><code>CMAKE_FIND_ROOT_PATH</code>: The path to the <code>contrib</code> libraries.
 @note Provide more then one value here (e.g., <code>-D CMAKE_FIND_ROOT_PATH="/path/to/contrib;/usr/"</code> will search in your <code>contrib</code> path and in <code>/usr</code> for the required libraries).
 <li><code>STL_DEBUG</code>: Enables STL debug mode.</li>
 <li><code>DB_TEST</code> (deprecated): Enables database testing.</li>
 <li><code>QT_DB_PLUGIN</code> (deprecated): Defines the db plugin used by Qt.
 </ul>
 View the description for each option by calling <code>ccmake</code>.

 @subsection can_i_use_another_solver Can I use another solver other than GLPK?

 Other solvers can be used, but by default, the build system only links to GLPK (this is how OpenMS binary packages must
 be built). To to use another solver, use <code>cmake ... -D USE_COINOR=1 ....</code> and refer to the documentation of the
 <code>LPWrapper</code> class.

 <h2><a class="anchor" id="changed_contrib_path"></a>I changed the <code>contrib</code> path, but re-running <code>CMake</code> won't change the library paths?</h2>

 Once a library is found and its location is stored in a cache variable, it will only be searched again if the
 corresponding entry in the cache file is set to false.

 @warning If you delete the `CMakeCache.txt`, all other custom settings will be lost.

 The most useful targets will be shown to you by calling the targets target, i.e. make targets.

 <h2><a class="anchor" id="cmake_cant_find_qt_library"></a><code>CMake</code> can't seem to find a Qt library (usually <code>QtCore</code>).</h2>

 <code>CMake</code> finds <code>QT</code> by looking for <code>qmake</code> in your <code>PATH</code> or for the Environment Variable <code>QTDIR</code>. Set these accordingly.

 Make sure there is no second installation of Qt (especially the MinGW version) in your local environment.
 @warning This might lead <code>CMake</code> to the wrong path (it's searching for the <code>Qt*.lib</code> files).
 You should only move or delete the offending <code>Qt</code> version if you know what you are doing.

 A save workaround is to edit the <code>CMakeCache</code> file (e.g. via <code>ccmake</code>) and set all paths relating to <code>QT</code> (e.g. <code>QT_LIBRARY_DIR</code>) manually.

 @subsection windows_what_version_of_visual_studio (Windows) What version of Visual Studio should I use?

 It is recommended to use the latest version. Get the latest <code>CMake</code>, as its generator needs to support your VS. If
 your VS is too new and there is no <code>CMake</code> for that yet, you're gonna be faced with a lot of conversion issues.
 This happens whenever the Build-System calls <code>CMake</code> (which can be quite often, e.g., after changes to <code>CMakeLists.txt</code>).

 @subsection how_to_speed_up_the_compile_process How to speed up the compile process

 To speed up the compile process of OpenMS, use several threads. If you have several processors/cores, build OpenMS
 <code>classes/tests</code> and <code>TOPP</code> tools in several threads. On Linux, use the <code>make option -j: make -j8 OpenMS TOPP test_build</code>.

 On Windows, Visual Studio solution files are automatically build with the <code>/MP</code> flag, such that Visual Studio uses all available cores of the machine.

 @section continuous_integration Continuous integration

 <h2><a class="anchor" id="how_does_travis_work"></a>How does <code>travis</code> work?</h2>

 <a href="https://travis-ci.org/"><code>Travis</code></a> is an automated system for continuous integration and each new commit and pull request is automatically run through the <code>travis</code> build system. This is controlled by a <code>.travis.yaml</code> file in the source tree.

 <h2><a class="anchor" id="what_can_we_do_if_travis_times_out"></a>What can we do if <code>travis</code> times out?</h2>

 First, restart <code>travis</code>, as it sometimes hangs. Since <code>travis</code> builds on shared infrastructure, the next build may work better. This needs to be done by an OpenMS core developer.

 Since we use extensive caching, the build may take much longer when many files are touched and may never complete (running into the <code>travis</code> time limit). In that case, we can rebuild the cache using the following approach:

 @code{.sh}
 $ git cherry-pick <git-sha>
 $ git push origin develop
 # Now wait for the build to complete
 $ git revert <git-sha>
 $ git push origin develop
 @endcode

 @section working_in_ides Working in IDEs

 <h2><a class="anchor" id="why_are_there_no_source_test_and_source_app_topp_utils_folders"></a>Why are there no <code>source/TEST</code> and <code>source/APPLICATIONS/TOPP|UTILS</code> folder?</h2>

 All source files added to an IDE are associated with their targets. Find the source files for each test within
 its own subproject. The same is true for the <code>TOPP</code> and <code>UTILS</code> classes.

 @subsection im_getting_the_error_error_c2471 I'm getting the error "Error C2471: cannot update program database"

 @warning This is a bug in Visual Studio and there is a <a href="https://docs.microsoft.com/en-us/cpp/error-messages/compiler-errors-1/compiler-error-c2471?view=msvc-170">bug fix</a>. Only apply it if you encounter the error. The bug fix might have unwanted side effects!

 @subsection visual_studio_cant_read_the_clang_format_file Visual Studio can't read the clang-format file.

 Depending on the Visual Studio version it might get an error like <code>Error while formating with ClangFormat</code>.
 This is because Visual Studio is using an outdated version of clang-format. Unfortunately there is no easy way to update
 this using Visual Studio itself. There is a plugin provided by LLVM designed to fix this problem, but the plugin doesn't
 work with every Visual Studio version. In that case, update clang-format manually using the pre-build clang-format binary.
 Both the binary and a link to the plugin can be found <a href="https://llvm.org/builds/">here</a>.
 To update clang-format download the binary and exchange it with the clang-format binary in your Visual Studio folder.
 For Visual Studio 19 it should be located at: <code>C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/Llvm/bin</code>.

 <h2><a class="anchor" id="the_indexer_gets_stuck_at_a_file_that_includes_seqan"></a>The indexer gets stuck at a file that includes the directive <code>\#includes seqan</code></h2>

 It seems that SeqAn code is not compatible with older eclipse C++ indexers. You should upgrade to eclipse galileo
(CDT 6.0.x). Also, increase the available memory limit in <code>eclipse.ini</code>, e.g. <code>-Xmx1024m</code> for one gig.

 @subsection the_parser_is_confused The parser is confused after OPENMS_DLLAPI and does not recognize standard C++ headers

 Go to <b>Project</b> > <b>Properties</b> > <b>C/C++ Include Paths and Preprocessor Symbols</b> > <b>Add Preprocessor symbol -> "OPENMS_DLLAPI="</b>.
 This tells eclipse that the macro is defined empty. In the same dialog add an external include path to
 e.g. <code>/usr/include/c++/4.3.3/</code>, etc. The issue with C++ headers was fixed in the latest galileo release.

 Hints to resolve the <code>OPENMS_DLLAPI</code> issue using the <code>cmake</code> generator are welcome.

 @subsection what_is_the_difference_between_class_tests_and_tool_tests What is the difference between class tests and tool tests?

 Class tests are unit tests that typically test the functionality of a class. They get built as standalone "additional" executables that include the class to be tested and the testing utility classes to test outcomes of single functions of the class. Unless you've added functions that are intended to be used outside of your new additional mode, you don't need to add anything.

 Tool tests are using the tool executable that the user would also receive. We use those executables to run the full algorithm on a small test dataset, to ensure that from version to version, the results stay the same.

 @subsection how_to_add_a_new_topp_test How to add a new TOPP test

 Each tool test consists of:
 <ul>
 <li>An executable call on a test dataset (by using either fixed command line parameters or a <code>.ini</code> file).</li>
 <li>A <code>FuzzyDiff</code> call that compares the temporary output file of the last call and a reference test output that you have to provide.</li>
 <li>A line to add a dependency of the <code>FuzzyDiff</code> call on the actual executable call (so they get executed after each other). Use e.g., <code>ctest -V -R IDMapper</code> to only test tests that include the regex <code>IDMapper</code> (<code>-V</code> is just verbose). Make sure to build the <code>IDMapper</code> and <code>IDMapper_test</code> executable after it is edited. <code>ctest</code> does not have any automatic dependency on the timestamps of the executables.</li>
 </ul>

 @subsection how_to_add_a_new_class_test How to add a new class test

 Add a test to every new class added to OpenMS.

 To add a test:

 <ol>
 <li>Add the class test to <code>src/tests/class_tests/<sub-project>/</code> (e.g., <code>src/tests/class_tests/openms/source/NewFileFormat_test.cpp</code>).</li>
 <li>Add the test to the <code>executables.cmake</code> file in the test folder.</li>
 <li>Add them to git with the command <code>git add</code></li>
 </ol>

 A test template for your specific class can be generated using the <code>create_test.php</code> script found in tools/.

 To generate a test template:

 <ol>
 <li>Make sure you generate XML files containing the class information <code>make xml</code>.</li>
 <li>Call:</li>
 @code{.sh}
 php tools/create_test.php /BUILD_DIRECTORY/ /PATH_TO_HEADER/MyClass.h \
  "FIRSTNAME LASTNAME" > ./src/tests/class_tests/openms/source/MyClass_test.cpp
 @endcode
 </ol>

 @subsection how_to_add_a_new_gui_test How to add a new GUI test for a class

 Suppose you want to create a GUI class for the class called <code>MyClass</code>.
 To add a new GUI test:
 <ol>
 <li>Create the <code>MyClass_test.cpp</code> in <code>src/tests/class_tests/openms_gui/source</code>.</li>
 <li>Add it to <code>src/tests/class_tests/openms_gui/CMakeLists.txt</code> in the GUI section.</li>
 <li>Have a look at existing GUI tests, as they use the QT TestLib framework and not the OpenMS macros.</li>
 </ol>

 <h2><a class="anchor" id="when_executing_make_test_all_tests_fail"></a>All tests fail when executing <code>make_test</code></h2>

 Check the <code>LD_LIBRARY_PATH</code> environment variable:

 Print the <code>LD_LIBRARY_PATH</code> with <code>echo $LD_LIBRARY_PATH</code>. If your <code>/lib/</code> folder is included, check that <code>libOpenMS.so</code> is present. With the <code>ldd</code> command, you can show the libraries used by an executable, e.g. <code>ldd /bin/ClassTest_test</code>.

 @section debugging Debugging

 The following section provides information on how to debug your code.

 @subsection how_to_find_out_which How to find out which shared libraries are used by an application

 Linux: Use <code>ldd</code>.

 Windows (Visual studio console): See <a href="http://www.dependencywalker.com/">Dependency Walker</a> (use x86 for 32 bit builds and the x64 version for 64 bit builds. Using the wrong version of depends.exe will give the wrong results) or
 <code>dumpbin /DEPENDENTS OpenMS.dll</code>.

 @subsection how_to_get_a_list How to get a list of the symbols defined in a (shared) library or object file?

 Linux: Use <code>nm &lt;library&gt;</code>.

 Use <code>nm -C</code> to switch on demangling of low-level symbols into their C++-equivalent names. <code>nm</code> also accepts <code>.a</code> and <code>.o</code> files.

 Windows (Visual studio console): Use <code>dumpbin /ALL &lt;library&gt;</code>.

 Use dumpbin on object files (.o) or (shared) library files (.lib) or the DLL itself e.g. <code>dumpbin /EXPORTS OpenMS.dll</code>.

 @subsection how_to_profile_code How to profile code

 IBM's profiler, available for all platforms (and free for academic use): Purify(Plus) and/or Quantify.

 Windows: this is directly supported by Visual Studio (Depending on the edition: Team and above). Follow their documentation.

 Linux:
 <ol>
 <li>Build OpenMS in debug mode (set <code>CMAKE_BUILD_TYPE</code> to <code>Debug</code>).</li>
 <li>Call the executable with valgrind: <code>valgrind –tool=callgrind</code>.</li>
 @warning Other processes running on the same machine can influence the profiling. Make sure your application gets enough
  resources (memory, CPU time).
 <li>Start and stop the profiling while the executable is running e.g. to skip initialization steps.</li>
 <li>Start <code>valgrind</code> with the option <code>–instr-atstart=no</code>.</li>
 <li>Call <code>callgrind -i [on|off]</code> to start/stop the profiling.</li>
 <li>The output can be viewed with <code>kcachegrind callgrind.out</code>.</li>
 </ol>

 @subsection linux_how_to_check_for_memory_leaks How to check code for memory leaks

 <ol>
 <li>Build OpenMS in debug mode (set <code>CMAKE_BUILD_TYPE</code> to <code>Debug</code>).</li>
 <li>Call the executable with <code>valgrind: valgrind --suppressions=OpenMS/tools/valgrind/openms_external.supp –leak-check=full &lt;executable&gt; &lt;parameters&gt;</code>.</li>
 </ol>

 Common errors are:
 <ul>
 <li><code>Invalid write/read ...</code> - Violation of container boundaries.</li>
 <li><code>... depends on uninitialized variable</code> - Uninitialized variables.</li>
 <li><code>... definitely lost</code> - Memory leak that has to be fixed.</li>
 <li><code>... possibly lost</code> - Possible memory leak, so have a look at the code.</li>
 </ul>

 For more information see the <a href="http://valgrind.org/docs/manual/"><code>valgrind</code> documentation</a>.

 @section release Release

 View <a href="https://github.com/OpenMS/OpenMS/wiki/Preparation-of-a-new-OpenMS-release#release_developer">preparation of a new OpenMS release</a> to learn more about contributing to releases.

 */
