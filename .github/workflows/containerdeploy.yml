name: deploy-container-images
on:
  workflow_dispatch:
  push:
    branches:
      - nightly
    tags:
      - "Release*"

jobs:
  deploy-docker:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.tag_name.outputs.tag }}
      downcase_repo: ${{ steps.downcase_repo.outputs.repo }}
    steps:
      - name: Free up space on the runner
        run: |
          # see: https://github.com/actions/runner-images/issues/2840
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "/opt/ghc"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
        id: extract_branch
      - name: Define tag name
        shell: bash
        run: |
            BRANCH=${{ steps.extract_branch.outputs.branch }}
            ## use latest to follow docker conventions
            if [[ "$BRANCH" == "develop" || "$BRANCH" == "nightly" || "$BRANCH" == "feat/singularity" ]]
            then 
              BRANCH="latest"
            fi
            ## Remove release/ from release branch name (or keep the non-release name)
            echo "tag=${BRANCH#release/}" >> $GITHUB_OUTPUT
        id: tag_name
      - name: Define contrib image tag
        id: contrib_tag
        shell: bash
        run: |
            # the contrib image tag is the same as the main image tag for release branches
            # for non-release branches, we use the latest contrib image
            if [[ "${{ steps.extract_branch.outputs.branch }}" == "release/"* ]]
            then
              echo "contrib_tag=${{ steps.tag_name.outputs.tag }}" >> $GITHUB_OUTPUT
            else
              echo "contrib_tag=latest" >> $GITHUB_OUTPUT
            fi
      - name: Downcase REPO
        run: echo "repo=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT
        id: downcase_repo
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Checkout contrib submodule repository
        run: git submodule update --init contrib
        # we only need the contrib submodule if we're on a release branch
        # otherwise, we use the latest contrib image built in the OpenMS/contrib
        if: startsWith(steps.extract_branch.outputs.branch, 'release/')
      - name: Build contrib container using the correct submodule hash
        uses: docker/build-push-action@v5
        with:
          push: true
          context: contrib
          file: contrib/dockerfiles/Dockerfile
          tags: |
            ghcr.io/openms/contrib:${{ steps.tag_name.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        if: startsWith(steps.extract_branch.outputs.branch, 'release/')
      - name: Test docker build in runtime base
        uses: docker/build-push-action@v5
        with:
          load: true # so other build steps can make use of cache layers from this build
          file: dockerfiles/Dockerfile
          target: test
          build-args: |
            NUM_BUILD_CORES=4
            BUILDKIT_CONTEXT_KEEP_GIT_DIR=1
            OPENMS_VERSION_TAG=${{ steps.tag_name.outputs.tag }}
            CONTRIB_IMAGE_TAG=${{ steps.contrib_tag.outputs.contrib_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build and push library image
        uses: docker/build-push-action@v5
        with:
          push: true # Will only build if this is not here
          file: dockerfiles/Dockerfile
          target: library
          build-args: |
            NUM_BUILD_CORES=4
            BUILDKIT_CONTEXT_KEEP_GIT_DIR=1
            OPENMS_VERSION_TAG=${{ steps.tag_name.outputs.tag }}
            CONTRIB_IMAGE_TAG=${{ steps.contrib_tag.outputs.contrib_tag }}
          tags: |
            ghcr.io/${{ steps.downcase_repo.outputs.repo }}-library:${{ steps.tag_name.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build and push tools image
        uses: docker/build-push-action@v5
        with:
          push: true # Will only build if this is not here
          file: dockerfiles/Dockerfile
          target: tools
          build-args: |
            NUM_BUILD_CORES=4
            BUILDKIT_CONTEXT_KEEP_GIT_DIR=1
            OPENMS_VERSION_TAG=${{ steps.tag_name.outputs.tag }}
            CONTRIB_IMAGE_TAG=${{ steps.contrib_tag.outputs.contrib_tag }}
          tags: |
            ghcr.io/${{ steps.downcase_repo.outputs.repo }}-executables:${{ steps.tag_name.outputs.tag }}
            ghcr.io/${{ steps.downcase_repo.outputs.repo }}-tools:${{ steps.tag_name.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Build and push tools + thirdparty image
        uses: docker/build-push-action@v5
        with:
          push: true # Will only build if this is not here
          file: dockerfiles/Dockerfile
          target: tools-thirdparty
          build-args: |
            NUM_BUILD_CORES=4
            BUILDKIT_CONTEXT_KEEP_GIT_DIR=1
            OPENMS_VERSION_TAG=${{ steps.tag_name.outputs.tag }}
            CONTRIB_IMAGE_TAG=${{ steps.contrib_tag.outputs.contrib_tag }}
          tags: |
            ghcr.io/${{ steps.downcase_repo.outputs.repo }}-tools-thirdparty:${{ steps.tag_name.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  deploy-singularity:
    runs-on: ubuntu-latest
    needs: deploy-docker
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Singularity install with defaults
        uses: singularityhub/install-singularity@main
        with:
          singularity-version: '3.11.5'
      - name: Build Singularity library image
        shell: bash
        run: |
            sudo singularity build library.sif docker://ghcr.io/${{ needs.deploy-docker.outputs.downcase_repo }}-library:${{ needs.deploy-docker.outputs.tag_name }}
      - name: Build Singularity tools image
        shell: bash
        run: |
            sudo singularity build executables.sif docker://ghcr.io/${{ needs.deploy-docker.outputs.downcase_repo }}-executables:${{ needs.deploy-docker.outputs.tag_name }}
      - name: Build Singularity tools + thirdparty image
        shell: bash
        run: |
            sudo singularity build executables-thirdparty.sif docker://ghcr.io/${{ needs.deploy-docker.outputs.downcase_repo }}-tools-thirdparty:${{ needs.deploy-docker.outputs.tag_name }}
      - name: Upload Singularity images to ghcr.io
        shell: bash
        run: |
            echo ${{ secrets.GITHUB_TOKEN }} | singularity remote login -u jpfeuffer --password-stdin oras://ghcr.io
            singularity push library.sif oras://ghcr.io/${{ needs.deploy-docker.outputs.downcase_repo }}-library-sif:${{ needs.deploy-docker.outputs.tag_name }}
            singularity push executables.sif oras://ghcr.io/${{ needs.deploy-docker.outputs.downcase_repo }}-executables-sif:${{ needs.deploy-docker.outputs.tag_name }}
            singularity push executables-thirdparty.sif oras://ghcr.io/${{ needs.deploy-docker.outputs.downcase_repo }}-tools-thirdparty-sif:${{ needs.deploy-docker.outputs.tag_name }}
