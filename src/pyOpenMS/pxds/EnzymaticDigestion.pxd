from Types cimport *
from DigestionEnzyme cimport *
from StringView cimport *
from libcpp cimport bool

cdef extern from "<OpenMS/CHEMISTRY/EnzymaticDigestion.h>" namespace "OpenMS":

    cdef cppclass EnzymaticDigestion "OpenMS::EnzymaticDigestion":
        EnzymaticDigestion(EnzymaticDigestion) nogil except +
        EnzymaticDigestion() nogil except + # wrap-doc:Class for the enzymatic digestion of sequences

        # const String NamesOfSpecificity[SIZE_OF_SPECIFICITY]
        # const String UnspecificCleavage

        Size getMissedCleavages() nogil except + # wrap-doc:Returns the number of missed cleavages for the digestion
        void setMissedCleavages(Size missed_cleavages) nogil except + # wrap-doc:Sets the number of missed cleavages for the digestion (default is 0). This setting is ignored when log model is used
        String getEnzymeName() nogil except + # wrap-doc:Returns the enzyme for the digestion
        void setEnzyme(DigestionEnzyme* enzyme) nogil except + # wrap-doc:Sets the enzyme for the digestion
        Specificity getSpecificity() nogil except + # wrap-doc:Returns the specificity for the digestion
        void setSpecificity(Specificity spec) nogil except + # wrap-doc:Sets the specificity for the digestion (default is SPEC_FULL)
        Specificity getSpecificityByName(const String& name) nogil except + # wrap-doc:Convert specificity string name to enum, returns SPEC_UNKNOWN if argument `name` is not valid

        Size digestUnmodified(StringView sequence,
                              libcpp_vector[ StringView ]& output,
                              Size min_length,
                              Size max_length) nogil except +
            # wrap-doc:
            #   Performs the enzymatic digestion of an unmodified sequence.
            #   -----
            #   By returning only references into the original string this is very fast.
            #   -----
            #   :param sequence: Sequence to digest
            #   :param output: Digestion products
            #   :param min_length: Minimal length of reported products
            #   :param max_length: Maximal length of reported products (0 = no restriction)
            #   :returns: Number of discarded digestion products (which are not matching length restrictions)

        bool isValidProduct(const String& sequence,
                            int pos, int length,
                            bool ignore_missed_cleavages) nogil except + 
            # wrap-doc:
            #   Boolean operator returns true if the peptide fragment starting at position `pos` with length `length` within the sequence `sequence` generated by the current enzyme
            #   -----
            #   Checks if peptide is a valid digestion product of the enzyme, taking into account specificity and the MC flag provided here.
            #   -----
            #   :param protein: Protein sequence
            #   :param pep_pos: Starting index of potential peptide
            #   :param pep_length: Length of potential peptide
            #   :param ignore_missed_cleavages: Do not compare MC's of potential peptide to the maximum allowed MC's
            #   :returns: True if peptide has correct n/c terminals (according to enzyme, specificity and missed cleavages)

        # bool filterByMissedCleavages(const String& sequence,
        #                              std::function<bool(Int)> filter) nogil except +


cdef extern from "<OpenMS/CHEMISTRY/EnzymaticDigestion.h>" namespace "OpenMS::EnzymaticDigestion":
    cdef enum Specificity "OpenMS::EnzymaticDigestion::Specificity":
        #wrap-attach:
        #    EnzymaticDigestion
        CROSS
        MONO
        LOOP
        NUMBER_OF_CROSS_LINK_TYPES
